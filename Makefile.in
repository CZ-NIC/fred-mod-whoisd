CC          = @CC@
CFLAGS	    = @CFLAGS@
CPPFLAGS    = @CPPFLAGS@
DEFS        = @DEFS@
LDFLAGS	    = @LDFLAGS@
LIBS        = @LIBS@

ORBIT-IDL   = @ORBIT_IDL@
DOXYGEN     = @DOXYGEN@
IDL         = @IDL@
IDLPREFIX   = @IDLPREFIX@
INSTALL     = @INSTALL@
PKG_STRING  = @PACKAGE_STRING@
PKG_TARNAME = @PACKAGE_TARNAME@
PKG_VERSION = @PACKAGE_VERSION@
ORB_CFLAGS  = @ORB_CFLAGS@
ORB_LDFLAGS = @ORB_LDFLAGS@
AP_CPPFLAGS = @AP_CPPFLAGS@
AP_CFLAGS   = @AP_CFLAGS@
AP_LDFLAGS  = @AP_LDFLAGS@
INSTALLDIR  = @INSTALLDIR@ 

HEADERS     = unconfig.h whois-client.h
CFILES      = mod_whoisd.c whois-client.c whois_test.c
AUXFILES    = config.h.in configure configure.ac disc.txt doxy.conf install-sh Makefile.in test.py README ChangeLog

EXECFILES   = mod_whoisd.so whois_test
IDLOUT      = ${IDLPREFIX}.h ${IDLPREFIX}-common.c ${IDLPREFIX}-stubs.c
OBJS        = whois-client.o ${IDLPREFIX}-common.o ${IDLPREFIX}-stubs.o
ALL_OBJS    = mod_whoisd.o $(OBJS) whois_test.o
TARDIR      = $(PKG_TARNAME)-$(PKG_VERSION)

.PHONY: all build install uninstall clean realclean doc dist
.SUFFIXES:

all: build doc

build: $(EXECFILES)

install: mod_whoisd.so
	$(INSTALL) -d $(DESTDIR)/$(INSTALLDIR)
	$(INSTALL) --mode 0644 mod_whoisd.so $(DESTDIR)/$(INSTALLDIR)

uninstall:
	-rm -f $(DESTDIR)/$(INSTALLDIR)/mod_whoisd.so

mod_whoisd.so: mod_whoisd.o $(OBJS)
	$(CC) -Bshareable -shared -o mod_whoisd.so $(LDFLAGS) $(LIBS) $(AP_LDFLAGS) $(ORB_LDFLAGS) $(OBJS) mod_whoisd.o

mod_whoisd.o: mod_whoisd.c whois-client.h
	$(CC) -fPIC $(CPPFLAGS) $(CFLAGS) $(AP_CPPFLAGS) $(AP_CFLAGS) $(DEFS) -c mod_whoisd.c

whois-client.o: whois-client.c whois-client.h ${IDLPREFIX}.h
	$(CC) -fPIC -include ${IDLPREFIX}.h $(CPPFLAGS) $(CFLAGS) $(ORB_CFLAGS) $(DEFS) -c whois-client.c

${IDLPREFIX}-common.o: ${IDLPREFIX}-common.c ${IDLPREFIX}.h
	$(CC) -fPIC $(CPPFLAGS) $(CFLAGS) $(ORB_CFLAGS) $(DEFS) -c ${IDLPREFIX}-common.c

${IDLPREFIX}-stubs.o: ${IDLPREFIX}-stubs.c ${IDLPREFIX}.h
	$(CC) -fPIC $(CPPFLAGS) $(CFLAGS) $(ORB_CFLAGS) $(DEFS) -c ${IDLPREFIX}-stubs.c

$(IDLOUT): $(IDL)
	$(ORBIT-IDL) --noskels $(IDL)

whois_test.o: whois_test.c whois-client.h $(IDLPREFIX).h
	$(CC) -c $(CPPFLAGS) $(CFLAGS) $(DEFS) $(ORB_CFLAGS) whois_test.c

whois_test: whois_test.o $(OBJS)
	$(CC) -o whois_test $(LDFLAGS) $(LIBS) $(ORB_LDFLAGS) $(OBJS) whois_test.o

test: whois_test
	python test.py curlew

clean:
	-rm -f $(ALL_OBJS)
	-rm -f $(IDLOUT)
	-rm -f doxygen.log
	-rm -f $(EXECFILES)
	-rm -fr doc/html
	-rm -f $(TARDIR).tar

realclean: clean
	-rm -rf acconfig.h autom4te.cache configure Makefile config.h config.log config.status

doc: doxy.conf
	@ if test x$(DOXYGEN) = x; then \
		 echo "Doxygen executable not configured."; \
		 echo "Use --with-doc parameter to configure."; \
	   else \
		 $(DOXYGEN) doxy.conf 2>&1 1>&doxygen.log; \
		 echo "index.html is in doc/html directory"; \
		 echo "output from doxygen is in doxygen.log file"; \
	   fi

dist: $(HEADERS) $(CFILES) $(AUXFILES) doc
	@ echo "Creating distribution tar archive for package $(PKG_STRING)."
	@ mkdir -p $(TARDIR)/doc
	@ echo "Bundling source files and build files."
	@ cp $(HEADERS) $(CFILES) $(AUXFILES) $(TARDIR)
	@ echo "Bundling documentation."
	@ cp doc/mainpage.h $(TARDIR)/doc
	@ cp -r doc/html $(TARDIR)/doc/html
	@ echo "Creating tar file."
	tar cvf $(TARDIR).tar $(TARDIR)
	@ rm -rf $(TARDIR)
